// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Features.Playground.iOS.Classes;
using Features.Playground.iOS.FlowLayouts.Maintenance;
using Features.Playground.iOS.Sources.Maintenance;
using Foundation;
using UIKit;

namespace Features.Playground.iOS.ViewControllers.Maintenance.Details
{
	public interface ICollectionViewLayoutConfigHelper
	{
		int RowCount { get; }
		UIEdgeInsets ContentInset { get; }
		nfloat ItemsDisplayedOnScreenPortrait { get; }
		nfloat ItemsDisplayedOnScreenLandscape { get; }
		nfloat CellSpacing { get; }
		nfloat LineSpacing { get; }


		/// <summary>
		/// Divides the cell width evenly across the collectionview size based on how many items are specified to display on screen.
		/// </summary>
		/// <returns>The cell width relative to collection view.</returns>
		/// <param name="cellHeight"></param>
		nfloat GetCollectionViewHeightRelativeToCellHeight( nfloat cellHeight );

		/// <summary>
		/// Divides the cell width evenly across the collectionview width based on how many cells are specified to display on screen.
		/// </summary>
		/// <returns>The cell width.</returns>
		/// <param name="collectionView">UICollectionView to calculate the cell width from</param>
		/// <param name="cellsDisplayedOnScreenAcrossCollectionView">How many cells will be displayed on screen horizontally</param>
		nfloat GetCellWidthRelativeToCollectionViewWidth( UICollectionView collectionView, nfloat cellsDisplayedOnScreenAcrossCollectionView );

		/// <summary>
		/// Divides the cell height evenly across the collectionview height based on how many cells are specified to display on screen.
		/// </summary>
		/// <returns>The cell width.</returns>
		/// <param name="collectionView">UICollectionView to calculate the cell height from</param>
		/// <param name="cellsDisplayedOnScreenDownCollectionView">How many cells will be displayed on screen vertically</param>
		nfloat GetCellHeightRelativeToCollectionViewHeight( UICollectionView collectionView, nfloat cellsDisplayedOnScreenDownCollectionView );
	}


	public class BaseHorizontalCollectionViewLayoutConfigHelper : ICollectionViewLayoutConfigHelper
	{
		public virtual int RowCount => 1;
		public virtual UIEdgeInsets ContentInset => new UIEdgeInsets( 0, 8f, 0, 8f );
		public virtual nfloat ItemsDisplayedOnScreenPortrait => 3.1f;
		public virtual nfloat ItemsDisplayedOnScreenLandscape => 6.1f;
		public virtual nfloat CellSpacing => 8f;
		public virtual nfloat LineSpacing => 8f;

		public virtual nfloat GetCellWidthRelativeToCollectionViewWidth( UICollectionView collectionView, nfloat cellsDisplayedOnScreenAcrossCollectionView )
		{
			collectionView.SetNeedsLayout( );
			collectionView.LayoutIfNeeded( );

			nfloat totalCellSpacingSizeDisplayed = ( nfloat )Math.Floor( cellsDisplayedOnScreenAcrossCollectionView ) * CellSpacing;
			nfloat cellWidth = ( collectionView.Bounds.Width - ContentInset.Left - totalCellSpacingSizeDisplayed ) / cellsDisplayedOnScreenAcrossCollectionView;

			return cellWidth;
		}

		public virtual nfloat GetCellHeightRelativeToCollectionViewHeight( UICollectionView collectionView, nfloat cellsDisplayedOnScreenDownCollectionView )
		{
			collectionView.SetNeedsLayout( );
			collectionView.LayoutIfNeeded( );

			nfloat totalCellSpacingSizeDisplayed = ( nfloat )Math.Floor( cellsDisplayedOnScreenDownCollectionView ) * CellSpacing;
			nfloat cellHeight = ( collectionView.Bounds.Height - ContentInset.Top - totalCellSpacingSizeDisplayed ) / cellsDisplayedOnScreenDownCollectionView;

			return cellHeight;
		}

		public nfloat GetCollectionViewHeightRelativeToCellHeight( nfloat cellHeight )
		{
			nfloat totalCellHeight = cellHeight * RowCount;
			nfloat totalLineSpacing = ( RowCount - 1 ) * LineSpacing;
			nfloat totalContentInsets = ContentInset.Top + ContentInset.Bottom;

			return totalCellHeight + totalLineSpacing + totalContentInsets;
		}
	}

	public class MaintenanceDetailsImageCollectionViewLayoutConfigHelper : BaseHorizontalCollectionViewLayoutConfigHelper
	{
	}

	public partial class MaintenanceDetailsViewController : UIViewController
	{
		private bool _isDescriptionCollapsed;
		
		public ICollectionViewLayoutConfigHelper ImagesCollectionViewLayoutConfig { get; set; }

		public MaintenanceDetailsViewController( IntPtr handle ) : base( handle )
		{
		}

		public override void ViewDidLoad( )
		{
			base.ViewDidLoad( );

			ConfigureNavigationBar( );

			ConfigureImageCollectionView( );

			ConfigureMoreLessDescriptionButton( );
		}

		private void ConfigureNavigationBar( )
		{
			NavigationItem.Title = "Details";
		}

		private void ConfigureMoreLessDescriptionButton( )
		{
			_isDescriptionCollapsed = true;
			
			const int collapsedDescriptionLineCount = 3;

			CGSize totalTextSize = new NSString( DuplicateConstraintedDescriptionLabel.Text )
				.GetSizeUsingAttributes( new UIStringAttributes { Font = DuplicateConstraintedDescriptionLabel.Font } );

			nfloat multipleLinesOfTextTotalWidth = DuplicateConstraintedDescriptionLabel.Bounds.Size.Width * collapsedDescriptionLineCount;

			if ( multipleLinesOfTextTotalWidth < totalTextSize.Width )
			{
				View.LayoutIfNeeded( );

				DuplicateConstraintedDescriptionLabel.Lines = collapsedDescriptionLineCount;

				UITapGestureRecognizer gestureRecognizer = new UITapGestureRecognizer( ( ) =>
				{
					// On Tap, toggle the collapsed flag.
					_isDescriptionCollapsed = !_isDescriptionCollapsed;

					// Update the number of lines allowed for the description & the hide/show button.
					UIView.Animate( 0.3, ( ) =>
					{
						MoreLessDescriptionButton.Text = _isDescriptionCollapsed ? "Hide full description" : "Show full description";
						DuplicateConstraintedDescriptionLabel.Lines = _isDescriptionCollapsed ? 0 : collapsedDescriptionLineCount;
						View.LayoutIfNeeded( );
					} );
				} );

				MoreLessDescriptionButton.UserInteractionEnabled = true;
				MoreLessDescriptionButton.TextColor = UIColor.Clear.FromHex( "#0cb6ea" );
				MoreLessDescriptionButton.AddGestureRecognizer( gestureRecognizer );
			}
			else
			{
				HideMoreLessDescriptionButton( );
			}
		}

		private void HideMoreLessDescriptionButton( )
		{
			MoreLessDescriptionButton.Hidden = true;
			MoreLessDescriptionHeightConstraint.Constant = 0;
		}

		private void ConfigureImageCollectionView( )
		{
			ImagesCollectionViewLayoutConfig = new MaintenanceDetailsImageCollectionViewLayoutConfigHelper( );

			ImageCollectionView.ContentInset = ImagesCollectionViewLayoutConfig.ContentInset;
			ImageCollectionView.DataSource = new MaintenanceDetailsImageCollectionViewDataSource( );
			ImageCollectionView.Delegate = new MaintenanceDetailsImageCollectionViewDelegateFlowLayout( this );
			ImageCollectionView.CollectionViewLayout = new MaintenanceDetailsImageCollectionViewFlowLayout( );
		}

		public override void ViewWillTransitionToSize( CGSize toSize, IUIViewControllerTransitionCoordinator coordinator )
		{
			base.ViewWillTransitionToSize( toSize, coordinator );

			if ( ImageCollectionView.CollectionViewLayout is MaintenanceDetailsImageCollectionViewFlowLayout flowLayout )
			{
				if ( ImageCollectionView.Delegate is MaintenanceDetailsImageCollectionViewDelegateFlowLayout delegateFlowLayout )
				{
					delegateFlowLayout.UpdateNumberOfItemsDisplayedOnScreen( );

					flowLayout.InvalidateLayout( );
				}
			}
		}

		public void SetCollectionViewHeight( nfloat cellHeight )
		{
			ImageCollectionViewHeightConstraint.Constant = ImagesCollectionViewLayoutConfig.GetCollectionViewHeightRelativeToCellHeight( cellHeight );
		}
	}
}