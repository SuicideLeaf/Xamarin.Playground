// This file has been autogenerated from a class added in the UI designer.
using System;
using Foundation;
using MvpArchitecture.Areas.Contacts;
using MvpArchitecture.Data.Models.Contacts;
using UIKit;
using Unity;
using static MvpArchitecture.Areas.Contacts.ContactsContract;

namespace MvpArchitecture.iOS.Areas.Contacts
{
	public partial class ContactsViewController : BaseApiViewController<ContactsPresenter, ContactsQueryParameters>, IContactsView
	{
		private ContactsTableViewController _contactsTableViewController;

		public bool IsActive => true;

		public ContactsViewController( IntPtr handle ) : base( handle ) { }

		public override void ViewDidLoad( )
		{
			QueryParameters = new ContactsQueryParameters( 10052 );

			base.ViewDidLoad( );

			SetPresenter( );

			ErrorContainer.AddGestureRecognizer( new UITapGestureRecognizer( async ( ) => await Presenter.LoadContacts( false ) ) );
		}

		public override async void ViewDidAppear( bool animated )
		{
			base.ViewDidAppear( animated );

			if ( !InitialLoadComplete )
			{
				await Presenter.Start( );
				InitialLoadComplete = true;
			}
		}

		public override void PrepareForSegue( UIStoryboardSegue segue, NSObject sender )
		{
			base.PrepareForSegue( segue, sender );

			if ( segue.DestinationViewController is ContactsTableViewController contactsTableViewController )
			{
				_contactsTableViewController = contactsTableViewController;
				_contactsTableViewController.RefreshControlEventHandler += async ( s, e ) => await Presenter.LoadContacts( true );
			}
		}

		public override void RegisterView( )
		{
			AppDelegate.Container.RegisterInstance<IContactsView>( this );
		}

		public void ShowContacts( ContactListViewModel contactList )
		{
			_contactsTableViewController.UpdateTableViewContacts( contactList );
			ToggleLoadingOverlay( false );
			ToggleRetryOverlay( false );
			ToggleRefreshing( false );
		}

		public void ShowLoadingContactsError( )
		{
			ToggleRefreshing( false );
			ToggleLoadingOverlay( false );
			ToggleRetryOverlay( true, "Something went wrong... Tap to retry" );
		}

		public void ShowLoadingOverlay( )
		{
			ToggleRefreshing( false );
			ToggleLoadingOverlay( true );
			ToggleRetryOverlay( false );
		}

		public void ShowNoContacts( )
		{
			ToggleRefreshing( false );
			ToggleLoadingOverlay( false );
			ToggleRetryOverlay( true, "No contacts found... Tap to retry" );
		}

		public void ToggleLoadingOverlay( bool active )
		{
			LoadingContainer.Hidden = !active;
			LoadingLabel.Text = "Loading...";
		}

		public void ToggleRefreshing( bool active )
		{
			if ( active )
			{
				_contactsTableViewController.RefreshControl.BeginRefreshing( );
			}
			else
			{
				_contactsTableViewController.RefreshControl.EndRefreshing( );
			}
		}

		public void ToggleRetryOverlay( bool active, string message = "" )
		{
			ErrorContainer.Hidden = !active;
			ErrorLabel.Text = message;
		}
	}
}
