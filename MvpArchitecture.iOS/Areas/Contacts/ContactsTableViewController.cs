// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using MvpArchitecture.Data.Models.Contacts;
using UIKit;

namespace MvpArchitecture.iOS.Areas.Contacts
{
	public partial class ContactsTableViewController : UITableViewController
	{
		private ContactsTableViewSource _contactsSource => ( ContactsTableViewSource )TableView.Source;

		public event EventHandler<EventArgs> RefreshControlEventHandler;

		public ContactsTableViewController( IntPtr handle ) : base( handle ) { }

		public override void ViewDidLoad( )
		{
			base.ViewDidLoad( );

			SetupTableView( );
		}

		private void SetupTableView( )
		{
			TableView.Source = new ContactsTableViewSource( );
			TableView.RefreshControl.ValueChanged += RefreshControl_ValueChanged;
		}

		private void RefreshControl_ValueChanged( object sender, EventArgs e )
		{
			RefreshControlEventHandler?.Invoke( sender, e );
		}

		public void UpdateTableViewContacts( ContactListViewModel contactList )
		{
			_contactsSource.UpdateContacts( TableView, contactList );
		}
	}

	public class ContactsTableViewSource : UITableViewSource
	{
		private ContactListViewModel ContactList { get; set; }

		public ContactsTableViewSource( )
		{
			ContactList = new ContactListViewModel( );
		}

		public override UITableViewCell GetCell( UITableView tableView, NSIndexPath indexPath )
		{
			ContactsTableViewCell cell = ( ContactsTableViewCell )tableView.DequeueReusableCell( "ContactsTableViewCell", indexPath );
			cell.Update( ContactList.Contacts[ indexPath.Row ] );

			return cell;
		}

		public override nint RowsInSection( UITableView tableview, nint section )
			=> ContactList.Contacts.Count;

		public void UpdateContacts( UITableView tableView, ContactListViewModel contacts )
		{
			ContactList = contacts;
			tableView.ReloadData( );
		}
	}
}
